// Import the model plugin
import _file_.modelDeclarationMoran._

val moranI = Val[Double]
val fertLossTime = Val[Double]
val P = Val[Double]
val N = Val[Double]

val eukaryoteEnvironment = LocalEnvironment(5)

val readModelOutput =
    ScalaTask("""
    // read file as an array of lines and get last line
    val lastLine = scala.io.Source.fromFile(output).getLines.toList.last.mkString
    // split the string and store it in an array
    val values = lastLine.split(" ")
    val moranI = values(0).toDouble
    val fertLossTime = values(1).toDouble
    val P = values(2).toDouble
    """
    )set(
        inputs+=output,
        (inputs,outputs)+=(a0,nF,a),
        outputs+=(moranI,fertLossTime,P)
    )

// this exectues the model and reads the outputs to work on OpenMole
val modelRunAndRead = MoleTask(modelPluginEuka -- readModelOutput)

val replications = Replication(
    evaluation = modelRunAndRead,
    seed = mySeed,
    sample = 10,
    aggregation = Seq (
      moranI aggregate average,
      fertLossTime aggregate average,
      P aggregate average,
      a0 aggregate average,
      nF aggregate average,
      a aggregate average
    )
  )

val sampling3D = DirectSampling(
  evaluation = replications,
  sampling =
    (T is 0.0) x
    (L is 100.0) x
    (d0 is 0.0) x
    (a in Seq(0.0,0.5,1.0)) x
    (a0 in Seq(0.2,0.4,0.6)) x
    (nF in Seq(1.0,2.0,4.0,8.0,16.0,32.0,64.0,128.0,256.0,512.0,1024.0)),
)

(sampling3D on eukaryoteEnvironment hook (workDirectory / "manScale-moranIfertLoss.csv"))
